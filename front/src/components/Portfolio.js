// ÏùòÌò∏

import React, { useContext, useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { Container, Col, Row } from "react-bootstrap";
import Award from "./award/Award";
import Certificate from "./certificate/Certificate";
import Education from "./education/Education";
import Project from "./project/Project";
import { UserStateContext } from "../App";
import * as Api from "../api";
import User from "./user/User";
import SideBar from "./SideBar";

function Portfolio() {
  const navigate = useNavigate();
  const params = useParams();
  const [portfolioOwner, setPortfolioOwner] = useState(null);
  // fetchPorfolioOwner Ìï®ÏàòÍ∞Ä ÏôÑÎ£åÎêòÎ©¥(isFetchCompletedÍ∞Ä true) Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨ÌòÑ
  // ÏïÑÎûò ÏΩîÎìúÎ•º Î≥¥Î©¥, isFetchCompletedÍ∞Ä falseÏù¥Î©¥ "loading..."Îßå Î∞òÌôòÎêòÏñ¥ÏÑú, ÌôîÎ©¥Ïóê Ïù¥ Î°úÎî© Î¨∏Íµ¨Îßå Îú®Í≤å Îê®.
  const [isFetchCompleted, setIsFetchCompleted] = useState(false);
  const userState = useContext(UserStateContext);
  const fetchPorfolioOwner = async (ownerId) => {
    // Ïú†Ï†Ä idÎ•º Í∞ÄÏßÄÍ≥† "/users/Ïú†Ï†Äid" ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú ÏöîÏ≤≠Ìï¥ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¥.
    const res = await Api.get("users", ownerId);
    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Îäî responseÏùò dataÏûÑ.
    const ownerData = res.data;
    console.log("ownerData.email", ownerData.email);
    // portfolioOwnerÏùÑ Ìï¥Îãπ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î°ú ÏÑ∏ÌåÖÌï®.
    setPortfolioOwner(ownerData);
    // fetchPorfolioOwner Í≥ºÏ†ïÏù¥ ÎÅùÎÇ¨ÏúºÎØÄÎ°ú, isFetchCompletedÎ•º trueÎ°ú Î∞îÍøà.
    setIsFetchCompleted(true);
  };

  useEffect(() => {
    // Ï†ÑÏó≠ ÏÉÅÌÉúÏùò userÍ∞Ä nullÏù¥ÎùºÎ©¥ Î°úÍ∑∏Ïù∏Ïù¥ Ïïà Îêú ÏÉÅÌÉúÏù¥ÎØÄÎ°ú, Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú ÎèåÎ¶º.
    if (!userState.user) {
      navigate("/login", { replace: true });
      return;
    }

    if (params.userId) {
      // ÎßåÏïΩ ÌòÑÏû¨ URLÏù¥ "/users/:userId" ÎùºÎ©¥, Ïù¥ userIdÎ•º Ïú†Ï†Ä idÎ°ú ÏÑ§Ï†ïÌï®.
      const ownerId = params.userId;
      // Ìï¥Îãπ Ïú†Ï†Ä idÎ°ú fetchPorfolioOwner Ìï®ÏàòÎ•º Ïã§ÌñâÌï®.
      fetchPorfolioOwner(ownerId);
    } else {
      // Ïù¥Ïô∏Ïùò Í≤ΩÏö∞, Ï¶â URLÏù¥ "/" ÎùºÎ©¥, Ï†ÑÏó≠ ÏÉÅÌÉúÏùò user.idÎ•º Ïú†Ï†Ä idÎ°ú ÏÑ§Ï†ïÌï®.
      const ownerId = userState.user.id;
      // Ìï¥Îãπ Ïú†Ï†Ä idÎ°ú fetchPorfolioOwner Ìï®ÏàòÎ•º Ïã§ÌñâÌï®.
      fetchPorfolioOwner(ownerId);
    }
  }, [params, userState, navigate]);
  if (!isFetchCompleted) {
    return "loading...";
  }

  let isEditable = portfolioOwner.id === userState.user?.id ? true : false;

// Í∞êÏÉÅÎ™®Îìú vs Ìé∏ÏßëÎ™®Îìú
const displayToggler = (e) => {
  e.preventDefault()
  const firstTargetElement = document.querySelector('.toggleTarget')

  // Ìé∏Ïßë Î™®ÎìúÎ°ú Î≥ÄÌôò
  if(firstTargetElement.classList.contains('display-none')){
    console.log('Ìé∏Ïßë Î™®ÎìúÎ°ú')
    const targetElement = document.querySelectorAll('.toggleTarget')
    targetElement.forEach( ele => {
      ele.classList.remove('display-none')
    })
    const editButton = document.querySelector('#editbutton')
    editButton.innerText = '‚úèÔ∏è'
  }
  // Í∞êÏÉÅ Î™®ÎìúÎ°ú Î≥ÄÌôò
  else{
    console.log('Í∞êÏÉÅ Î™®ÎìúÎ°ú')
    const targetElement = document.querySelectorAll('.toggleTarget')
    targetElement.forEach( ele => {
      ele.classList.add('display-none')
    })
    const editButton = document.querySelector('#editbutton')
    editButton.innerText = 'üëÄ'
  }
}

  console.log(localStorage.getItem("recentlyView"));
  return (
    <Container fluid style={{ zIndex: 0 }}>
      <Row style={{ width: "100%" }}>
        <Col md="3" lg="3">
          <User portfolioOwnerId={portfolioOwner.id} isEditable={isEditable} />
        </Col>
        <Col md="7">
          <div>
          <button id='editbutton' onClick={displayToggler} style={{
              width:'50px',
              height:'50px',
              position:'fixed',
              color:'red',
              zIndex:'99',
              bottom: '5%',
              right: '20%',
              borderColor:'gray',
              borderRadius: '50%',
              backgroundColor: 'aliceblue'
            }}>‚úèÔ∏è</button>

            <Education isEditable={isEditable} paramsUserId={params.userId} />
            <Award isEditable={isEditable} paramsUserId={params.userId} />
            <Project
              portfolioOwnerId={portfolioOwner.id}
              isEditable={isEditable}
            />
            <Certificate isEditable={isEditable} paramsUserId={params.userId} />
          </div>
        </Col>
        <SideBar />
      </Row>
    </Container>
  );
}

export default Portfolio;
